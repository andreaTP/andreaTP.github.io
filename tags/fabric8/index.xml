<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fabric8 on Andrea Peruffo</title><link>http://andreaperuffo.com/tags/fabric8/</link><description>Recent content in fabric8 on Andrea Peruffo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 11 May 2021 10:46:23 +0100</lastBuildDate><atom:link href="http://andreaperuffo.com/tags/fabric8/index.xml" rel="self" type="application/rss+xml"/><item><title>Typed Java shell for Kubernetes extensions at fingertips</title><link>http://andreaperuffo.com/posts/java-shell-4-kube/</link><pubDate>Tue, 11 May 2021 10:46:23 +0100</pubDate><guid>http://andreaperuffo.com/posts/java-shell-4-kube/</guid><description>Working with Java vibrant tooling ecosystem on Kubernetes nowadays is a blast and you should know about it!
Wait, wait, what&amp;rsquo;s going on there???
Let&amp;rsquo;s go through the BOM of this demo first:
:globe_with_meridians: Kubernetes extensions # On Kubernetes, the Operator pattern has quickly become a popular way to provide &amp;ldquo;Kubernetes native&amp;rdquo; experience for various services and applications.
The contract for &amp;ldquo;talking&amp;rdquo; to Operators is based on Custom Resource Definitions (CRD) and Custom Resources (CR) which are usually shipped as plain and agnostic yaml files.</description></item></channel></rss>